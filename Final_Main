
// Anthony Herrera
// 9/18/2025
// CMPR 131
// Prof. Quach
// Assignment 04

#include <iostream>
#include <string>
#include <iomanip>
#include "input.h"
#include "Complex.h"
#include "Rational.h"
#include "Polynomial.h"
using namespace std;

const char* INDENT = "\t";
char mainMenu();

//Complex function lists
void complexProgram();
char complexMenu();
void singleComplexOperations();
void multiComplexOperations();

//Rational function lists
void RationalMenu();
void OneRational(Rational& r);
void MultRational(Rational& r3);

void EnterR1(Rational& r1);
void EnterR2(Rational& r2);


//polynomial function lists
// // Function Prototypes
void PolynomialMenu();
void SinglePolynomialMenu();
void TwoPolynomialMenu();





int main() {
    bool running = true;
    do {
        char functionType = mainMenu();

        switch (functionType) {
        case '1': complexProgram(); break;
        case '2': RationalMenu(); break;
        case '3': PolynomialMenu(); break;
        default:
            running = false;
        }
    } while (running);
    cout << INDENT << "Program exitted successfully. " << endl;
    return EXIT_SUCCESS;
}

/*
@return char - choice made after main option prompt.
precondition: program begins
postcondition: decision tree to handle return choice. */
char mainMenu() {
    bool invalidChoice = true;

    //rh reference to avoid instancing a char

    char&& tempChoice = 'A';
    do {
        system("cls");
        cout << "\n";
        cout << INDENT << " CMPR131 Chapter 4: Complex Numbers, Rational Numbers, Polynomials by Anthony Herrera(9 / 17 / 2025)\n";
        cout << INDENT << string(95, (char)205) << endl;
        cout << INDENT << "1 > Complex Numbers\n";
        cout << INDENT << "2 > Rational Numbers\n";
        cout << INDENT << "3 > Polynomials\n";
        cout << INDENT << string(95, (char)196) << endl;
        cout << INDENT << "0 > exit\n";
        cout << INDENT << string(95, (char)205) << endl;
        tempChoice = inputChar("\tEnter choice:", false);
        if (tempChoice > '3') {
            cerr << INDENT << "INVALID CHOICE ENTERED.TRY AGAIN. \n\t";
            system("pause");
            continue;
        }
        else invalidChoice = false;
    } while (invalidChoice);
    return tempChoice;
}


/**********************************************************************/
/*Complex Section */
/**********************************************************************/

void complexProgram() {
    bool continueRunning = true;
    do {
        char menuChoice = complexMenu();

        switch (menuChoice) {
        case 'A':
            singleComplexOperations();
            break;
        case 'B':
            multiComplexOperations();
            break;
        case '0':
            continueRunning = false;
            break;
        default:break;
        }

    } while (continueRunning);
    cout << "Sending you back to main menu..." << endl;
    system("pause");
    return;
}
char complexMenu() {
    char tempChoice = 'A';
    bool invalidChoice = true;

    do {
        system("cls");
        cout << R"zzz(
          A complex number is a number that can be expressed in the form a + b i, where a and b are real
          numbers, and i represents the "imaginary uni", satisfying the equation i^2 = -1. Because no
          real number satisfies this equation, i is called an imaginary number. For the complex number
          a + b i, a is called the real part and b is called the imaginary part.

        1> Complex Numbers
)zzz";
        cout << INDENT << string(90, (char)205) << endl;
        cout << INDENT << "A> A Complex Number\n";
        cout << INDENT << "B> Multiple Complex Numbers\n";
        cout << INDENT << string(90, (char)196) << endl;
        cout << INDENT << "0> return\n";
        cout << INDENT << string(90, (char)205) << endl;
        tempChoice = toupper(inputChar("\tEnter choice:"));
        if (tempChoice != '0' && (tempChoice != 'A' && tempChoice != 'B')) {
            cerr << INDENT << "INVALID CHOICE ENTERED.TRY AGAIN. \n\t";
            system("pause");
            continue;
        }
        else invalidChoice = false;
    } while (invalidChoice);
    return tempChoice;
}


void multiComplexOperations() {
    Complex complexNum1;
    Complex complexNum2;
    Complex complexNum3(1.07109, 0.120832);

    Complex tempVar1;
    Complex tempVar2;


    char menuChoice = 'A';
    do {
        system("cls");
        cout << INDENT << "B > Multiple Complex Numbers\n";
        cout << INDENT << string(90, (char)205) << endl;
        cout << INDENT << INDENT << "1. Enter complex number C1\n";
        cout << INDENT << INDENT << "2. Enter complex number C2\n";
        cout << INDENT << INDENT << "3. Verify condition operators(== and != ) of C1 and C2\n";
        cout << INDENT << INDENT << "4. Evaluate arithmatic operators(+, -, *and / ) of C1 and C2\n";
        cout << INDENT << INDENT << "5. Evaluate steps in(3 * (C1 + C2) / 7) / (C2 - C1 / 9) != (1.07109 + 0.120832i) ?\n";
        cout << INDENT << string(90, (char)196) << endl;
        cout << INDENT << "0. return\n";
        cout << INDENT << string(90, (char)205) << endl;
        menuChoice = inputChar("\tOption: ", false);

        switch (menuChoice) {
        case '1':
            complexNum1.setRealFactor(inputDouble("\t\tEnter a number (Double Value) for the real part of C1: "));
            complexNum1.setImaginaryFactor(inputDouble("\t\tEnter a number (double Value) for the imaginary part of C1:"));
            cout << "\n\t\t" << "C1 = " << complexNum1 << endl << endl;
            break;
        case '2':
            complexNum2.setRealFactor(inputDouble("\t\tEnter a number (Double Value) for the real part of C2: "));
            complexNum2.setImaginaryFactor(inputDouble("\t\tEnter a number (double Value) for the imaginary part of C2:"));
            cout << "\n\t\t" << "C2 = " << complexNum2 << endl << endl;
            break;
        case '3':
            cout << "\n\n";
            cout << INDENT << INDENT << "C1 == C2 -> ( " << complexNum1 << ") == ( " << complexNum2 << ") ? " << (complexNum1 == complexNum2 ? "True" : "False") << endl;
            cout << INDENT << INDENT << "C2 != C1 -> ( " << complexNum2 << ") != ( " << complexNum1 << ") ? " << (complexNum2 != complexNum1 ? "True" : "False") << endl << endl;

            break;
        case '4':
            cout << "\n\n";
            cout << INDENT << INDENT << "Addition      : C1 + C2 -> (" << complexNum1 << ") + (" << complexNum2 << ") = " << (complexNum1 + complexNum2) << endl;
            cout << INDENT << INDENT << "Subtraction   : C2 - C1 -> (" << complexNum2 << ") - (" << complexNum1 << ") = " << (complexNum2 - complexNum1) << endl;
            cout << INDENT << INDENT << "Multiplication: C1 * C2 -> (" << complexNum1 << ") * (" << complexNum2 << ") = " << (complexNum1 * complexNum2) << endl;
            try {
                cout << INDENT << INDENT << "Division      : C2 / C1 -> (" << complexNum2 << ") / (" << complexNum1 << ") = " << setprecision(3) << complexNum2 / complexNum1;
            }
            catch (const exception& e) {
                cerr << "\n" << INDENT << INDENT << e.what() << endl << endl;
            }
            cout << endl << endl;
            break;
        case '5':
            cout << "\n\n";
            cout << INDENT << INDENT << "C1 = " << complexNum1 << endl;
            cout << INDENT << INDENT << "C2 = " << complexNum2 << endl;
            cout << INDENT << INDENT << "C3 = " << complexNum3 << endl << endl;
            cout << INDENT << INDENT << "Evaluating expression..." << endl << endl;

            cout << INDENT << INDENT << "(3 * (C1 + C2) / 7) / (C2 - C1 / 9) != (" << complexNum3 << ")?\n\n";
            tempVar1 = complexNum1 + complexNum2;
            tempVar2 = complexNum2 - complexNum1;

            cout << INDENT << INDENT << "Step #1: (3 * (" << tempVar1 << ") / 7 ) / ( " << tempVar2 << " / 9) != (" << complexNum3 << ")\n";
            tempVar1 = tempVar1 * 3;
            tempVar2 = complexNum2 - complexNum1;

            cout << INDENT << INDENT << "Step #2: ((" << tempVar1 << ") / 7) / (R2 / 9) != (" << complexNum3 << ")\n";
            tempVar1 = tempVar1 / 7.0;
            tempVar2 = tempVar2 / 9.0;
            cout << INDENT << INDENT << "step #3: ((" << tempVar1 << ") / (" << tempVar2 << ") != (" << complexNum3 << ")\n";
            try {
                tempVar1 = tempVar1 / tempVar2;
            }
            catch (const exception& e) {
                tempVar1.setRealFactor(0.0);
                tempVar1.setImaginaryFactor(0.0);
            }
            cout << INDENT << INDENT << "step #4: (" << tempVar1 << ") != (" << complexNum3 << ")\n";
            cout << INDENT << INDENT << "step #5: " << ((tempVar1 != complexNum3) ? "True" : "False") << endl << endl;

            break;
        default:
            cout << INDENT << "Sending you back to main menu. \n\t";
            system("pause");
            return;
        }
        system("pause");
    } while (true);
}



void singleComplexOperations() {
    Complex complexNum;
    char menuChoice = 'A';
    double constant = 0.0;
    Complex C2;

    do {
        system("cls");
        cout << INDENT << "A> A Complex Number\n";
        cout << INDENT << string(90, (char)205) << endl;
        cout << INDENT << INDENT << "1. Enter the real number\n";
        cout << INDENT << INDENT << "2. Enter the imaginary number\n";
        cout << INDENT << INDENT << "3. Display the complex number\n";
        cout << INDENT << INDENT << "4. Negate the complex number\n";
        cout << INDENT << INDENT << "5. Add (+) the complex number with a constant\n";
        cout << INDENT << INDENT << "6. Subtract (-_ the complex number with a constant\n";
        cout << INDENT << INDENT << "7. Multiply (*) the complex number with a constant\n";
        cout << INDENT << INDENT << "8. Divide(/) the complex number with a constant\n";
        cout << INDENT << string(90, (char)196) << endl;
        cout << INDENT << INDENT << "0. return\n";
        cout << INDENT << string(90, (char)205) << endl;
        menuChoice = inputChar("\tOption:", false);


        switch (menuChoice) {
        case '1':
            complexNum.setRealFactor(inputDouble("\tEnter a number (double value) for the real part: "));
            break;
        case '2':
            complexNum.setImaginaryFactor(inputDouble("\tEnter a number (double value) for the imaginary part: "));
            break;
        case '3':
            cout << INDENT << INDENT << "Complex number C1 = " << complexNum << "\n\n";
            break;
        case '4':
            cout << INDENT << INDENT << "-(" << complexNum << ") = " << (complexNum * -1) << "\n\n";
            break;
        case '5':
            C2 = complexNum;
            constant = inputDouble("\t\tEnter a value (double):");
            cout << "\n\n";
            //first add
            cout << INDENT << INDENT << "C2 + value\n" << INDENT << INDENT;
            cout << "(" << C2 << ") + " << constant << " = " << (C2 + constant);
            //second add
            C2 = complexNum;
            cout << "\n\n";
            cout << INDENT << INDENT << "value + C2\n" << INDENT << INDENT;
            cout << constant << " + (" << C2 << ") " << " = " << (constant + C2);
            cout << "\n\n";
            break;
        case '6':
            C2 = complexNum;
            constant = inputDouble("\t\tEnter a value (double):");
            cout << "\n\n";
            //first subtract
            cout << INDENT << INDENT << "C2 - value\n" << INDENT << INDENT;
            cout << "(" << C2 << ") - " << constant << " = " << (C2 - constant);
            //second sub
            C2 = complexNum;
            cout << "\n\n";
            cout << INDENT << INDENT << "value - C2\n" << INDENT << INDENT;
            cout << constant << " - (" << C2 << ") " << " = " << (constant - C2);
            cout << "\n\n";

            break;
        case '7':
            C2 = complexNum;
            constant = inputDouble("\t\tEnter a value (double):");
            cout << "\n\n";
            //first mult
            cout << INDENT << INDENT << "C2 * value\n" << INDENT << INDENT;
            cout << "(" << C2 << ") * " << constant << " = " << (C2 * constant);
            //second mult
            C2 = complexNum;
            cout << "\n\n";
            cout << INDENT << INDENT << "value * C2\n" << INDENT << INDENT;
            cout << constant << " * (" << C2 << ") " << " = " << (constant * C2);
            cout << "\n\n";
            break;
        case '8':
            C2 = complexNum;
            constant = inputDouble("\t\tEnter a value (double):");
            cout << "\n\n";
            try {
                //first divison
                cout << INDENT << INDENT << "C2 / value\n" << INDENT << INDENT;
                cout << "(" << C2 << ") / " << constant << " = " << (C2 / constant);
                //second division
                C2 = complexNum;
                cout << "\n\n";
                cout << INDENT << INDENT << "value / C2\n" << INDENT << INDENT;
                cout << constant << " / (" << C2 << ") " << " = " << (constant / C2);
                cout << "\n\n";
            }
            catch (const exception& e) {
                cerr << INDENT << e.what() << endl;
            }
            break;
        default:
            cout << INDENT << "Sending you back to main menu. \n\t";
            system("pause");
            return;
        }
        system("pause");
    } while (true);
}
/**********************************************************************/
/*End of Complex section*/
/**********************************************************************/


/**********************************************************************/
/*Rational Section */
/**********************************************************************/
void EnterR1(Rational& r1)
{
    r1.setNumerator(inputInteger("\n\tEnter numerator for r1: "));

    while (true)
    {
        try
        {
            r1.setDenominator(inputInteger("\n\tEnter Denominator for r1: "));
            break;
        }
        catch (const Rational::divisionByZero& e)
        {
            cerr << e.what();
        }
    }

    r1.normalize();

}

void EnterR2(Rational& r2)
{
    r2.setNumerator(inputInteger("\n\tEnter numerator for r2: "));
    while (true)
    {
        try
        {
            r2.setDenominator(inputInteger("\n\tEnter Denominator for r2: "));
            break;
        }
        catch (const Rational::divisionByZero& e)
        {
            cerr << e.what();
        }
    }

    r2.normalize();

}


void RationalMenu()
{
    Rational r3;
    Rational r;

    while (true)
    {
        system("cls");
        cout << "\n\tA rational number is a number that can be written as a fraction, a/b, where a is numerator and"
            << "\n\tb is denominator.Rational numbers are all real numbers, and can be positive or negative.A"
            << "\n\tnumber that is not rational is called irrational.Most of the numbers that people use in everyday"
            << "\n\tlife are rational.These include fractions, integers and numbers with finite decimal digits."
            << "\n\tIn general, a number that can be written as a fraction while it is in its own form is rational.";

        cout << "\n\n\t2> Rational Numbers";
        cout << "\n\t" << string(105, char(205));
        cout << "\n\tA> Rational Number"
            << "\n\tB> Multiple Rational Numbers";
        cout << "\n\t" << string(105, char(196));
        cout << "\n\t0. Return";
        cout << "\n\t" << string(105, char(205));

        char optionR = toupper(inputChar("\n\tOption: "));

        switch (optionR)
        {
        case '0':
            cout << "\n\tReturn to main menu\n";
            return;
        case 'A': OneRational(r); break;

        case 'B': MultRational(r3); break;

        default:
            cout << "\n\tInvalid choice.\n";

        }

        cout << "\n\n";
        system("pause");
    }

}

void OneRational(Rational& r)
{

    while (true)
    {
        system("cls");
        cout << "\n\n\tA Rational Number";
        cout << "\n\t" << string(105, char(205));
        cout << "\n\t1. Enter the numerator"
            << "\n\t2. Enter the denominator"
            << "\n\t3. Display the rational number"
            << "\n\t4. Normalize the rational number"
            << "\n\t5. Negate the rational number"
            << "\n\t6. Add (+) the rational number with a constant"
            << "\n\t7. Subtract (-) the rational number with a constant"
            << "\n\t8. Multiply(*) the rational number with a constant"
            << "\n\t9. Divide(/) the rational number with a constant";
        cout << "\n\t" << string(105, char(196));
        cout << "\n\t0. Return";
        cout << "\n\t" << string(105, char(205));

        int optionR = toupper(inputInteger("\n\tOption: "));

        switch (optionR)
        {
        case 0:
            cout << "\n\tReturn to main menu\n";
            return;
        case 1:
        {
            r.setNumerator(inputInteger("\n\tEnter an integer for the numerator: "));
        } break;

        case 2:
        {
            while (true)
            {
                try
                {
                    r.setDenominator(inputInteger("\n\tEnter an integer for the denominator: "));
                    break;
                }
                catch (const Rational::divisionByZero& e)
                {
                    cerr << e.what();
                }
            }
        } break;
        case 3:
        {
            cout << "\n\tRational number R1 = " << r;
        } break;

        case 4:
        {
            Rational copy4 = r;
            copy4.normalize();
            cout << "\n\tNormalized rational number R2 (a copy of R1)" << "\n\t" << copy4;
        }break;

        case 5:
        {
            Rational copy = r;
            Rational negated = -copy;
            cout << "\n\tNegated rational number R2 (a copy of R1)";
            cout << "\n\t-(" << copy << ")" << " = " << -copy;
        } break;

        case 6:
        {
            Rational copy = r;
            int addConst = inputInteger("\n\tEnter an integer value: ");
            cout << "\n\n\tR2 + value"
                << "\n\t(" << copy << ") + " << addConst << " = " << (copy + addConst);

            cout << "\n\n\tvalue + R2"
                << "\n\t" << addConst << " + (" << copy << ")" << " = " << (addConst + copy);
        } break;

        case 7:
        {
            Rational copy = r;
            int subConst = inputInteger("\n\tEnter an integer value: ");
            cout << "\n\n\tR2 - value"
                << "\n\t(" << copy << ") - " << subConst << " = " << (copy - subConst);

            cout << "\n\n\tvalue - R2"
                << "\n\t" << subConst << " - (" << copy << ")" << " = " << (subConst - copy);
        } break;

        case 8:
        {
            Rational copy = r;
            int multConst = inputInteger("\n\tEnter an integer value: ");
            cout << "\n\n\tR2 * value"
                << "\n\t(" << copy << ") * " << multConst << " = " << (copy * multConst);

            cout << "\n\n\tvalue * R2"
                << "\n\t" << multConst << " * (" << copy << ")" << " = " << (multConst * copy);
        } break;

        case 9:
        {
            Rational copy = r;
            int divConst = inputInteger("\n\tEnter an integer value: ");
            cout << "\n\n\tR2 / value";
            try
            {
                cout << "\n\t(" << copy << ") / " << divConst << " = " << (copy / divConst);
            }
            catch (const std::exception&)
            {
                cout << "\n\t(" << copy << ") / " << divConst << " = " << "undefined";
            }

            cout << "\n\n\tvalue / R2";
            try
            {
                cout << "\n\t" << divConst << " / (" << copy << ")" << " = " << (divConst / copy);
            }
            catch (const std::exception&)
            {
                cout << "\n\t" << divConst << " / (" << copy << ")" << " = " << "undefined";
            }

        } break;

        default:
            cout << "\n\tInvalid choice.\n";
        }

        cout << "\n\n";
        system("pause");
    }
}

void MultRational(Rational& r3)
{
    Rational r1, r2;

    r3.setNumerator(621);
    r3.setDenominator(889);



    while (true)
    {
        system("cls");
        cout << "\n\n\tB> Multiple Rational Numbers";
        cout << "\n\t" << string(105, char(205));
        cout << "\n\t1. Enter rational number R1"
            << "\n\t2. Enter rational number R2"
            << "\n\t3. Verify condition operators (==, !=, >=, >, <= and <) of R1 and R2"
            << "\n\t4. Evaluate arithmatic operators (+, - , * and /) of R1 and R2"
            << "\n\t5. Evaluate (3 * (R1 + R2) / 7) / (R2 - R1 / 9) >= 621/889";
        cout << "\n\t" << string(105, char(196));
        cout << "\n\t0. Return";
        cout << "\n\t" << string(105, char(205));

        int optionR = toupper(inputInteger("\n\tOption: "));

        switch (optionR)
        {
        case 0:
            cout << "\n\tReturn to main menu\n";
            return;
        case 1:
        {
            EnterR1(r1);
            cout << "\n\tR1 = " << r1;
        } break;

        case 2:
        {
            EnterR2(r2);
            cout << "\n\tR2 = " << r2;
        } break;
        case 3:
        {
            cout << boolalpha;
            cout << "\n\tR1 == R2 -> (" << r1 << ") == (" << r2 << ") ? " << (r1 == r2);
            cout << "\n\tR1 != R2 -> (" << r1 << ") != (" << r2 << ") ? " << (r1 != r2);
            cout << "\n\tR1 >= R2 -> (" << r1 << ") >= (" << r2 << ") ? " << (r1 >= r2);
            cout << "\n\tR1  > R2 -> (" << r1 << ")  > (" << r2 << ") ? " << (r1 > r2);
            cout << "\n\tR1 <= R2 -> (" << r1 << ") <= (" << r2 << ") ? " << (r1 <= r2);
            cout << "\n\tR1  < R2 -> (" << r1 << ")  < (" << r2 << ") ? " << (r1 < r2);
        } break;

        case 4:
        {
            cout << "\n\tAddition      :R1 + R2 -> (" << r1 << ") + (" << r2 << ") = " << (r1 + r2);
            cout << "\n\tSubtraction   :R1 - R2 -> (" << r1 << ") - (" << r2 << ") = " << (r1 - r2);
            cout << "\n\tMultiplication:R1 * R2 -> (" << r1 << ") * (" << r2 << ") = " << (r1 * r2);
            try
            {
                cout << "\n\tDivision      :R1 / R2 -> (" << r1 << ") / (" << r2 << ") = " << (r1 / r2);
            }
            catch (const Rational::divisionByZero& e)
            {
                cout << "\n\tDivision      :R1 / R2 -> (" << r1 << ") / (" << r2 << ") = 0/0";
            }
        }break;


        case 5:
        {

            cout << "\n\tR1 = " << r1;
            cout << "\n\tR2 = " << r2;
            cout << "\n\tR3 = " << r3;

            cout << "\n\n\tEvaluating Expression...";
            cout << "\n\t\t (3 * (R1 + R2) / 7) / (R2 - R1 / 9) >=" << r3 << " ?";
            cout << "\n\tstep #1: (3 * (" << r1 + r2 << ") / 7) / (R2 - " << r1 / 9 << ") >= " << r3 << " ? ";
            cout << "\n\tstep #2: (" << 3 * (r1 + r2) << ") / 7) / (" << r2 - r1 / 9 << ") >= " << r3 << " ? ";
            cout << "\n\tstep #3: (" << (3 * (r1 + r2) / 7) << ") / (" << r2 - r1 / 9 << ") >= " << r3 << " ? ";

            cout << boolalpha;
            try
            {
                cout << "\n\tstep #4: (" << (3 * (r1 + r2) / 7) / (r2 - r1 / 9) << ") >= " << r3 << " ? ";
                cout << "\n\tstep #5: " << ((3 * (r1 + r2) / 7) / (r2 - r1 / 9) >= r3);
            }
            catch (const Rational::divisionByZero& e)
            {
                cout << "\n\tstep #4: (0/0) >= " << r3 << " ? ";
                cout << "\n\tstep #5: " << (0 >= r3);
            }


        } break;

        default:
            cout << "\n\tInvalid choice.\n";
        }

        cout << "\n\n";
        system("pause");
    }
}

/**********************************************************************/
/*End of Rational section*/
/**********************************************************************/


/**********************************************************************/
/*Polynomial Section */
/**********************************************************************/

void PolynomialMenu() {
    char option;
    do {
        system("cls");
        cout << "\n\tA polynomial is an expression consisting of variables (also called indeterminates) and";
        cout << "\n\tcoefficients, that involves only the operations of addition, subtraction, multiplication,";
        cout << "\n\tand non-negative integer exponentiation of variables.";
        cout << "\n\t3> Polynomials";

        cout << "\n\t" << string(105, char(196));
        cout << "\n\tA> A Polynomial";
        cout << "\n\tB> Multiple Polynomials";
        cout << "\n\t" << string(105, char(196));
        cout << "\n\tR> Return";
        cout << "\n\t" << string(105, char(205));


        option = toupper(inputChar("\n\tOption:", "ABR"));

        switch (option) {
        case 'A': SinglePolynomialMenu(); break;
        case 'B': TwoPolynomialMenu(); break;
        case 'R': std::cout << "\nReturning to main menu...\n"; return;
        default:  std::cout << "\nInvalid choice.\n"; std::system("pause");
        }

    } while (true);
}


void SinglePolynomialMenu() {
    Polynomial p;
    int choice;
    int numTerms = 0;
    double x;

    do {
        system("cls");
        std::cout << "\n\tA> Single Polynomial";
        std::cout << "\n\t" << std::string(90, char(205));
        std::cout << "\n\t1. Enter the number of terms";
        std::cout << "\n\t2. Specify the coefficients";
        std::cout << "\n\t3. Evaluate expression";
        std::cout << "\n\t4. Solve for the derivative";
        std::cout << "\n\t5. Solve for the integral";
        std::cout << "\n\t" << std::string(90, char(196));
        std::cout << "\n\t0. Return";
        std::cout << "\n\t" << std::string(90, char(205));


        choice = inputInteger("\n\tEnter a choice: ", 0, 5);

        switch (choice) {
        case 1:
            numTerms = inputInteger("\n\tEnter the number of terms (1..100): ", 1, 100);
            std::cout << "\n\tNumber of terms set to " << numTerms << "\n";

            break;

        case 2:
            if (numTerms == 0) {
                std::cout << "\n\tPlease enter the number of terms first (option 1).\n";
                break;
            }
            for (int i = 0; i < numTerms; i++) {
                int power = numTerms - 1 - i;
                double coeff = inputDouble("Enter the coefficient for term #" + to_string(i + 1) + ": ");
                p.setCoeff(power, coeff);
            }



            std::cout << "\n\tThe P(x) is entered: " << p << "\n";
            break;
        case 3: {
            if (p.degree() < 0) {
                std::cout << "\nPolynomial is empty. Please input terms first.\n";
                break;
            }

            std::cout << "\nP1(x) = " << p << "\n";

            double x = inputDouble("Enter the value of x to evaluate the polynomial: ");

            p.printEvaluationSteps(x);

            break;
        }



        case 4:
            std::cout << "\n\tf(x) = " << p << "\n";
            std::cout << "\n\tf'(x) = " << p.derivative() << "\n";
            break;

        case 5:
            std::cout << "\n\tf(x) = " << p << "\n";
            std::cout << "\n\tIntegral of f(x) = " << p.integral() << " + C\n";
            break;

        case 0:
            return;

        default:
            std::cout << "\n\tInvalid option!\n";
        }

        std::cout << "\n";
        system("pause");

    } while (true);
}

void TwoPolynomialMenu() {
    Polynomial P1, P2;
    int numTerms;
    double scalar;

    numTerms = inputInteger("\n\tEnter the number of terms (1..100) for the first polynomial (P1): ", 1, 100);
    P1.inputTerms(numTerms);
    std::cout << "\n\tThe first polynomial (P1) is entered: " << P1 << "\n";

    numTerms = inputInteger("\n\tEnter the number of terms (1..100) for the second polynomial (P2): ", 1, 100);
    P2.inputTerms(numTerms);
    std::cout << "\n\tThe second polynomial (P2) is entered: " << P2 << "\n";

    std::cout << "\n\tAddition of polynomials       -> P1 + P2 = " << (P1 + P2);
    std::cout << "\n\tSubtraction of polynomials    -> P1 - P2 = " << (P1 - P2);
    std::cout << "\n\tMultiplication of polynomials -> P1 * P2 = " << (P1 * P2) << "\n";

    std::cout << "\n\tEnter a constant value: ";
    cin >> scalar;
    std::cout << "\n\t" << scalar << "* Polynomial(P1) = " << (scalar * P1);
    std::cout << "\n\tPolynomial(P2) * " << scalar << " = " << (P2 * scalar) << "\n";

    std::cout << "\n";
    system("pause");
}

/**********************************************************************/
/*End of Polynomial Section */
/**********************************************************************/
